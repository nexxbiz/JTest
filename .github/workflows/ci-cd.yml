name: CI/CD Pipeline

on:
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
  
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
  
  # Trigger on tag creation for releases
  push:
    tags: [ 'v*.*.*' ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: TestResults/*.trx

  package:
    name: Create NuGet Packages
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Determine version
      id: version
      run: |
        if [[ ${{ github.ref }} =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
          echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          # For main branch builds, use version with pre-release suffix
          echo "version=1.0.0-preview.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and Pack JTest.Core
      run: dotnet pack src/JTest.Core/ --configuration Release --no-restore -p:PackageVersion=${{ steps.version.outputs.version }} --output packages/

    - name: Build and Pack JTest.Cli
      run: dotnet pack src/JTest.Cli/ --configuration Release --no-restore -p:PackageVersion=${{ steps.version.outputs.version }} --output packages/

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: packages/*.nupkg

    - name: Upload symbol packages as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-symbol-packages
        path: packages/*.snupkg

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: package
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: packages/

    - name: Download symbol package artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-symbol-packages
        path: packages/

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish to NuGet
      run: |
        for package in packages/*.nupkg; do
          echo "Publishing $package to NuGet..."
          dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}